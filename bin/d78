#!/bin/bash
[ `uname` == Darwin ] && function readlink() { realpath $2; }
BASE_DIR=$(dirname $(dirname `readlink -f $0`))
cmd=$1
shift
case _$cmd in
_hgrc)
   hgrc_content=
   if [ -e $HOME/.hgrc ]; then
      hgrc_content=`grep "^username" $HOME/.hgrc`
      [ ! -z "$hgrc_content" ] && hgrc_content="[ui]\n$hgrc_content"
   fi
   hgrc_content="$hgrc_content\n\n%include work/d78/hgrc78"
   echo "# This should be in ~/.hgrc"
   echo -e $hgrc_content
;;
_newproject)
[ -z "$1" ] && echo "Usage: $0 $cmd PROJECT_DIR" && exit 1
pdir=${1:?not set}
[ -e $pdir/build.gradle ] && echo "Project already exists in $pdir" && exit 1
pname=`basename $pdir`

if [ -e `dirname $pdir`/build-includes.gradle ]; then
  msg_add="add '$pname': 'cap78_$pname' to `dirname $pdir`/build-includes.gradle"
elif [ -e `dirname $pdir`/settings.gradle ]; then
  msg_add="add '$pname' to `dirname $pdir`/settings.gradle"
else
  echo -e "Directory `dirname $pdir` doesn't have a settings.gradle or build-includes.gradle\nThere will be no way to add the project to the list"
  exit 1
fi

mkdir -p $pdir/src/main/python/cap78/$pname
[ ! -e $pdir/build.gradle ] && cat << EOF > $pdir/build.gradle
plugins {
    id 'com.seveneight.build.shared-tasks'
}
group = 'com.seveneight'

cap78.pySetup {
    //
    // Versions are maintained in publics/default-versions.txt
    // They can be overridden here
    //
    install_requires = [
        cap78.project('publics'),
        cap78.project('privates'),
    ]
}
EOF
[ ! -e $pdir/src/main/python/cap78/__init__.py ] && echo "__import__('pkg_resources').declare_namespace(__name__)" > $pdir/src/main/python/cap78/__init__.py
[ ! -e $pdir/src/main/python/cap78/$pname/__init__.py ] && touch $pdir/src/main/python/cap78/$pname/__init__.py
echo "Project cap78_$pname created in $pdir"
echo "Run hg add $pdir"
echo "And $msg_add"
;;
_update)
git -C $BASE_DIR pull -q
[ $? != 0 ] && echo "Update failed" && exit 1
REQ_VERSION_OF_HG=6.1
REQ_VERSION_OF_PYTHON=3.6.3
PKG_DIR=$BASE_DIR/bin/.hgpkg
################################
# This is common for d78 and s78
#
function download_pkg() {
    name=${1:?not set}
    version=${2:?not set}
    existing_version=$3
    if [ "$version" != "$existing_version" ]; then
      mkdir -p $PKG_DIR/$name-$version && \
      curl http://com-78-pypi.s3-website-us-east-1.amazonaws.com/docker_bin/$name-$version.tgz > $PKG_DIR/$name-$version.tgz && \
      cd $PKG_DIR/$name-$version && tar xvfz $PKG_DIR/$name-$version.tgz && rm $PKG_DIR/$name-$version.tgz
      [ $? != 0 ] && echo "Updating $name-$version failed" && exit 1
    fi
}
function mv_pkg() {
    name=${1:?not set}
    version=${2:?not set}
    existing_version=$3
    if [ "$version" != "$existing_version" ]; then
      [ -e $PKG_DIR/$name-old ] && rm -rf $PKG_DIR/$name-old
      [ -e $PKG_DIR/$name ] && mv $PKG_DIR/$name $PKG_DIR/$name-old
      [ -e $PKG_DIR/$name ] && echo "Cannot move $PKG_DIR/$name out of the way " && exit 1
      mv $PKG_DIR/$name-$version $PKG_DIR/$name
      [ $? != 0 ] && echo "Cannot move $name-$version to $PKG_DIR/$name" && exit 1
      PKG_UPDATED=1
    fi
}
VERSION_OF_HG=
VERSION_OF_PYTHON=
PKG_UPDATED=
if [ -e ${PKG_DIR:?not set}/__versions__ ]; then
  . $PKG_DIR/__versions__
fi
download_pkg mercurial ${REQ_VERSION_OF_HG:?not set} $VERSION_OF_HG
download_pkg python ${REQ_VERSION_OF_PYTHON:?not set} $VERSION_OF_PYTHON
mv_pkg mercurial $REQ_VERSION_OF_HG $VERSION_OF_HG
mv_pkg python $REQ_VERSION_OF_PYTHON $VERSION_OF_PYTHON
for name in mercurial python; do
  [ -e $PKG_DIR/$name-old ] && rm -rf $PKG_DIR/$name-old
done;
if [ ! -z "$PKG_UPDATED" ]; then
  echo -e "VERSION_OF_HG=$REQ_VERSION_OF_HG\nVERSION_OF_PYTHON=$REQ_VERSION_OF_PYTHON">$PKG_DIR/__versions__
  echo "Updated packages:"
  cat $PKG_DIR/__versions__
fi
################################
if [ -z "$PKG_UPDATED" ]; then
  echo "Packages up-to-date:"
  cat $PKG_DIR/__versions__
fi
;;
*)
echo "Usage: `basename $0` update|hgrc|newproject"
[ ! -z $cmd ] && exit 1
;;
esac