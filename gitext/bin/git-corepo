#!/bin/bash
. $(dirname $0)/../lib/corepo

function show_usage() {
  echo "Usages:"
  echo " git corepo --list|-l"
  echo " git corepo --list-config"
  echo " git corepo status|st [-a][-v]"
  echo " git corepo do [-a|-c|-n|-m|-M|-u|-U] GITCOMMAND   # execute git command on corepos"
  echo " git corepo :NAME --get-path"
  echo " git corepo :NAME --get-ref [--sanitize]   # show hash referenced by the last commit in the main repo"
  echo " git corepo :NAME [-n] GITCOMMAND          # execute git command for a corepo"
  echo ""
  echo " Supported variables:"
  echo "  {cbranch}  current branch in the main repo"
  echo "  {name}     corepo name"
  echo "  {ref}      corepo hash referenced by the last commit in the main repo"
  echo ""
  echo " Options:"
  echo "  -a  include main repo"
  echo "  -u  include only unmodified repos (clean git status)"
  echo "  -U  same, but fail if at least one modified repo found"
  echo "  -m  include only modified repos (uncommitted changes)"
  echo "  -M  same, but fail if no modified repos found"
  echo "  -c  continue on error"
  echo "  -n  dry-run, only show the command"
  echo "  -v  verbose"
  echo ""
  echo "Examples:"
  echo " git corepo do -c log -1 {ref}"
  echo " git corepo do -U checkout -b {cbranch} {ref}   # checkout code in corepos based on the current commit and branch"
  echo " git corepo do -ma commit -m \"Fixes BUG-0078\""
}

function exec_corepo_cmd() {
  cmd=$1
  shift
  corepo_git_cmd="env -u GIT_PREFIX $GIT_CMD"
  if [ "$cmd" == "-n" ]; then
    function echo_cmd() { printf "%q " "$@"; echo; }
    corepo_git_cmd="echo_cmd git"
    cmd=$1
    shift
  fi
  case _$cmd in
  _--get-ref)
    init_repo_lastcommit $corepo_name "$@"
    [ ! -z "$repo_lastcommit_err" ] && echo >&2 "$repo_lastcommit_err" && return 1
    echo "$repo_lastcommit"
    ;;
  _--get-path)
    init_repo_path $corepo_name
    echo $repo_path
    ;;
  _[a-z]*)
    init_repo_path $corepo_name
    cbranch=
    args=()
    for arg in "$@"; do
      for varname in ref path name cbranch; do
        if [[ "$arg" == *"{$varname}"* ]]; then
          case $varname in
          name)
            varval=$corepo_name
            [ "$corepo_name" == "." ] && varval=$(basename $repo_path)
            ;;
          path)
            varval="$repo_path"
            ;;
          ref)
            init_repo_lastcommit $corepo_name --sanitize
            [ ! -z "$repo_lastcommit_err" ] && echo >&2 "$repo_lastcommit_err" && return 1
            varval=$repo_lastcommit
            ;;
          cbranch)
            [ -z "$cbranch" ] && cbranch=$($GIT_CMD rev-parse --abbrev-ref HEAD)
            varval=$cbranch
            ;;
          *)
            echo >&2 "Unsupported variable {$varname}"
            return 1
            ;;
          esac
          arg="${arg//\{$varname\}/$varval}"
        fi
      done
      args+=("$arg")
    done
    $corepo_git_cmd -C $repo_path $cmd "${args[@]}"
    ;;
  _|_--help)
    show_usage
    ;;
  *)
    echo >&2 "Unsupported sub-command: $cmd"
    show_usage
    return 1
    ;;
  esac
}

cmd=$1
shift
case _$cmd in
_--list|_-l)
  init_corepos
  echo "$corepos_list"
  ;;
_--list-config)
  echo "corepos.ignoreerrors=$($GIT_CMD config --type=bool --get corepos.ignoreerrors)"
  echo "corepos.ignoreuncomitted=$($GIT_CMD config --type=bool --get corepos.ignoreuncomitted)"
  ;;
_status|_st)
  init_corepos
  include_self=
  verbose=
  OPTIND=1
  while getopts "av" opt; do
      case $opt in
      a) include_self="." ;;
      v) verbose="1" ;;
      \?) echo "Invalid command-line: $@" >&2; exit 1;;
      esac
  done
  final_exit_code=0
  for corepo_name in $corepos_list $include_self; do
    init_repo_path $corepo_name
    init_repo_status $repo_path
    if [ ! -z "$repo_error" ]; then
      echo >&2 "$repo_path: $repo_error"
      final_exit_code=1
    else
      echo "$repo_path: $repo_commit"
      [ ! -z "$repo_uncommitted" ] && [ ! -z "$verbose" ] && echo -e "$repo_uncommitted"
    fi
  done
  exit $final_exit_code
  ;;
_do)
  include_self=
  ignore_errors=
  repo_selection=
  show_option=
  OPTIND=1
  while getopts "acnuUmM" opt; do
      case $opt in
      a) include_self="." ;;
      c) ignore_errors=1 ;;
      u|U|m|M) repo_selection=$opt ;;
      n) show_option=-n ;;
      \?) echo "Invalid command-line: $@" >&2; exit 1;;
      esac
  done
  shift "$((OPTIND-1))"

  init_corepos
  final_exit_code=0
  loop_list="$corepos_list $include_self"
  if [ ! -z "$repo_selection" ]; then
    modified_repos=
    unmodified_repos=
    for corepo_name in $corepos_list $include_self; do
      init_repo_path $corepo_name
      init_repo_status $repo_path
      if [ ! -z "$repo_error" ]; then
        echo >&2 "$repo_path: $repo_error"
        final_exit_code=1
      else
        if [ -z "$repo_uncommitted" ]; then
          unmodified_repos="$unmodified_repos $corepo_name"
        else
          modified_repos="$modified_repos $corepo_name"
        fi
      fi
    done
    [ "$final_exit_code" != "0" ] && exit $final_exit_code
    case $repo_selection in
    m) loop_list="$modified_repos" ;;
    u) loop_list="$unmodified_repos" ;;
    M) loop_list="$modified_repos"; [ -z "$modified_repos" ] && echo "No modified repos found" >&2 && exit 1;;
    U) loop_list="$unmodified_repos"; [ ! -z "$modified_repos" ] && echo "There are pending changes in $modified_repos" >&2 && exit 1;;
    esac
  fi
  [ -z "$1" ] && echo -e "Missing command for [${loop_list## }]\n Usage: git corepo $cmd GITCOMMAND" >&2 && exit 1
  [ -z "$loop_list" ] && echo "Nothing to do" && exit 0
  delim=""
  for corepo_name in $loop_list; do
    [ "$corepo_name" != "." ] && echo -e "$delim[$corepo_name]" || echo -e "$delim[$(basename $PWD)]"
    (exec_corepo_cmd $show_option "$@")
    exit_code=$?
    [ $exit_code != 0 ] && final_exit_code=$exit_code && [ -z "$ignore_errors" ] && exit $exit_code
    delim="\n"
  done
  exit $final_exit_code
  ;;
_:[a-z]*)
  corepo_name="${cmd:1}"
  init_corepos
  echo "$corepos_list" | grep "^$corepo_name\$" > /dev/null
  [ $? != 0 ] && echo >&2 "Unknown co-repo $corepo_name" && exit 1
  exec_corepo_cmd "$@"
  ;;
_:)
  corepo_name=.
  exec_corepo_cmd "$@"
  ;;
_|--help)
  show_usage
  ;;
*)
  echo >&2 "Unsupported command: $cmd"
  show_usage
  exit 1
  ;;
esac