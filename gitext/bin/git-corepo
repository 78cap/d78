#!/bin/bash
. $(dirname $0)/../lib/corepo

function show_usage() {
  echo "Usages:"
  echo " git corepo --list[+]|-l[+]"
  echo " git corepo --list-config"
  echo " git corepo status[+]|st[+] [-v]"
  echo " git corepo :NAME --get-path"
  echo " git corepo :NAME --get-ref [--sanitize]   # show commit referenced by the HEAD"
  echo " git corepo :NAME [--show] GITCOMMAND      # execute/show git command for a corepo"
  echo " git corepo :: [--show] GITCOMMAND         # execute/show git command for each corepo"
  echo " git corepo ::: [--show] GITCOMMAND        # execute/show git command for each corepo, ignore errors"
  echo " git corepo ::+ [--show] GITCOMMAND        # execute/show git command for each corepo and current"
  echo " git corepo :::+ [--show] GITCOMMAND       # execute/show git command for each corepo and current, ignore errors"
  echo ""
  echo "Examples:"
  echo " git corepo :: log -1 {ref}"
  echo " git corepo :: checkout -b {cbranch} {ref}   # checkout code in corepos based on the current commit and branch"
  echo " git corepo :: commit -m \"Fixes BUG-0078 in {name}\""
}

function exec_corepo_cmd() {
  cmd=$1
  shift
  corepo_git_cmd="env -u GIT_PREFIX $GIT_CMD"
  if [ "$cmd" == "--show" ]; then
    function echo_cmd() { printf "%q " "$@"; echo; }
    corepo_git_cmd="echo_cmd git"
    cmd=$1
    shift
  fi
  case _$cmd in
  _--get-ref)
    init_repo_lastcommit $corepo_name "$@"
    [ ! -z "$repo_lastcommit_err" ] && echo >&2 "$repo_lastcommit_err" && return 1
    echo "$repo_lastcommit"
    ;;
  _--get-path)
    init_repo_path $corepo_name
    echo $repo_path
    ;;
  _[a-z]*)
    init_repo_path $corepo_name
    cbranch=
    args=()
    for arg in "$@"; do
      for varname in ref path name cbranch; do
        if [[ "$arg" == *"{$varname}"* ]]; then
          case $varname in
          name)
            varval=$corepo_name
            [ "$corepo_name" == "." ] && varval=$(basename $repo_path)
            ;;
          path)
            varval="$repo_path"
            ;;
          ref)
            init_repo_lastcommit $corepo_name --sanitize
            [ ! -z "$repo_lastcommit_err" ] && echo >&2 "$repo_lastcommit_err" && return 1
            varval=$repo_lastcommit
            ;;
          cbranch)
            [ -z "$cbranch" ] && cbranch=$($GIT_CMD rev-parse --abbrev-ref HEAD)
            varval=$cbranch
            ;;
          *)
            echo >&2 "Unsupported variable {$varname}"
            return 1
            ;;
          esac
          arg="${arg//\{$varname\}/$varval}"
        fi
      done
      args+=("$arg")
    done
    $corepo_git_cmd -C $repo_path $cmd "${args[@]}"
    ;;
  _|_--help)
    show_usage
    ;;
  *)
    echo >&2 "Unsupported sub-command: $cmd"
    show_usage
    return 1
    ;;
  esac
}

cmd_p=$1
shift
cmd="${cmd_p%+}"
include_self=
[ "$cmd" != "$cmd_p" ] && include_self="."
case _$cmd in
_--list|_-l)
  init_corepos
  echo "$corepos_list"
  ;;
_--list-config)
  echo "corepos.ignoreerrors=$($GIT_CMD config --type=bool --get corepos.ignoreerrors)"
  echo "corepos.ignoreuncomitted=$($GIT_CMD config --type=bool --get corepos.ignoreuncomitted)"
  ;;
_status|_st)
  init_corepos
  for corepo_name in $corepos_list $include_self; do
    init_repo_path $corepo_name
    init_repo_status $repo_path
    if [ ! -z "$repo_error" ]; then
      echo >&2 "$repo_path: $repo_error"
    else
      echo "$repo_path: $repo_commit"
      [ ! -z "$repo_uncommitted" ] && [ "$1" == "-v" ] && echo -e "$repo_uncommitted"
    fi
  done
  ;;
_::|_:::)
  init_corepos
  delim=""
  ignore_errors=
  [ "$cmd" == ":::" ] && ignore_errors=1
  final_exit_code=0
  for corepo_name in $corepos_list $include_self; do
    [ "$corepo_name" != "." ] && echo -e "$delim[$corepo_name]" || echo -e "$delim[$(basename $PWD)]"
    (exec_corepo_cmd "$@")
    exit_code=$?
    [ $exit_code != 0 ] && final_exit_code=$exit_code && [ -z "$ignore_errors" ] && exit $exit_code
    delim="\n"
  done
  exit $final_exit_code
  ;;
_:[a-z]*)
  corepo_name="${cmd:1}"
  init_corepos
  echo "$corepos_list" | grep "^$corepo_name\$" > /dev/null
  [ $? != 0 ] && echo >&2 "Unknown co-repo $corepo_name" && exit 1
  exec_corepo_cmd "$@"
  ;;
_:)
  corepo_name=.
  exec_corepo_cmd "$@"
  ;;
_|--help)
  show_usage
  ;;
*)
  echo >&2 "Unsupported command: $cmd"
  show_usage
  exit 1
  ;;
esac